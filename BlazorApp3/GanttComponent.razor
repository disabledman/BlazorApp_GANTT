@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

<div style="width:1300px; height:500px; position:relative;">
    <div class="gantt-outer">
        <div class="gantt-corner"></div>
        <div class="gantt-timeline-scroll" id="gantt-timeline-scroll">
            <div class="gantt-timeline" style="width:100%">
                @for (int i = 0; i < m_TimeSlots.Count; i++)
                {
                    if(i > 0)
                    {
                        if(m_TimeSlots[i - 1].Year != m_TimeSlots[i].Year)
                        {
                            <div class="timeline-slot middle" style="left:@(200 + m_TimeSlotsWidth.Take(i - 1).Sum())px;top:23px;">@m_TimeSlots[i].Year</div>
                        }
                        else if (m_TimeSlots[i - 1].Month != m_TimeSlots[i].Month)
                        {
                            <div class="timeline-slot middle" style="left:@(200+m_TimeSlotsWidth.Take(i-1).Sum())px;top:23px;">@m_TimeSlots[i].Month</div>
                        }
                    }
                    <div class="timeline-slot" style="width:@($"{m_TimeSlotsWidth[i]}px;");color:@TimeSlotColor(m_TimeSlots[i]);">@FormatTimeSlot(m_TimeSlots[i])</div>
                }
            </div>
        </div>
        <div class="gantt-main">
            <div class="gantt-label-scroll" id="gantt-label-scroll">
                @for (int i = 0; i < TaskRows.Count; i++)
                {
                    <div class="row-label" id="row-label-@i" style="background:@TaskRows[i].Color; color:#fff;">@TaskRows[i].Name</div>
                }
            </div>
            <div class="gantt-tasks-scroll" id="gantt-tasks-scroll">
                <div class="gantt-tasks" style="width:100%">
                    @for (int i = 0; i < TaskRows.Count; i++)
                    {
                        <div class="row-tasks" id="row-tasks-@i">
                            @foreach (var task in TaskRows[i].Tasks)
                            {
                                <div class="task" style="@GetTaskStyle(task); background:@GetTaskColor(TaskRows[i].Color, task);">@task.Name</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("ganttSyncScroll");
        }
        await JS.InvokeVoidAsync("ganttSyncRowHeights");
    }
}

<style>
.gantt-outer {
    display: grid;
    grid-template-columns: 150px 1fr;
    grid-template-rows: 40px 1fr;
    font-family: Arial, sans-serif;
    margin: 20px;
    background: #fff;
}
.timeline-slot {
    /* border-right: 1px solid #ddd; */
    padding: 5px 0;
    text-align: center;
    box-sizing: border-box;
    color: #222;
    background: #fff;
}
.timeline-slot.middle {
            position: absolute;
            padding: 0px 2px 0px 2px;
            background-color: #add8e6;
            color: white;
            border-radius: 3px;
            z-index: 1; /* 确保上层显示 */
            font-size: 10px;
}
.gantt-corner {
    grid-row: 1 / 2;
    grid-column: 1 / 2;
    background: #f8f8f8;
    border-right: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    height: 40px;
}
.gantt-timeline-scroll {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    overflow-x: hidden;
    overflow-y: hidden;
    background: #fff;
    border-bottom: 1px solid #ddd;
    height: 40px;
}
.gantt-timeline {
    display: flex;
    height: 40px;
}
.gantt-main {
    grid-row: 2 / 3;
    grid-column: 1 / 3;
    display: flex;
    height: 460px;
}
.gantt-label-scroll {
    width: 150px;
    min-width: 150px;
    max-width: 150px;
    overflow-y: hidden;
    overflow-x: hidden;
    background: #f8f8f8;
    border-right: 1px solid #ddd;
    height: 100%;
}
.gantt-tasks-scroll {
    flex: 1;
    overflow: auto;
    height: 100%;
}
.gantt-tasks {
    /* min-width is handled dynamically by inline style */
}
.gantt-label-col, .gantt-tasks-col {
    display: flex;
    flex-direction: column;
}
.row-label, .row-tasks {
    min-height: 50px;
    display: flex;
    align-items: stretch;
}
.row-label {
    width: 150px;
    min-width: 150px;
    max-width: 150px;
    padding: 10px;
    border-bottom: 1px solid #ddd;
    background: #f8f8f8;
    color: #222;
    box-sizing: border-box;
}
.row-tasks {
    position: relative;
    min-height: 50px;
    border-bottom: 1px solid #ddd;
}
.task {
    position: absolute;
    background: #4CAF50;
    color: white;
    padding: 5px;
    border-radius: 3px;
    margin: 5px 0;
    min-width: 36px;
    text-align: left;
    cursor: pointer;
    overflow: hidden; 
    white-space: nowrap;
    text-overflow: ellipsis;
    font-size: 16px;
    /* 為任務之間添加間距 */
    margin-bottom: 8px;
    /* 添加邊框以區分任務 */
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
</style>

@code {
    [Parameter]
    public string CurrentView { get; set; } = "Month";

    [Parameter]
    public List<TaskRow> TaskRows { get; set; } = new();

    [Parameter]
    public DateTime StartDate { get; set; } = DateTime.Today;

    //
    private const int __GanttMaxWidth__ = (1100); // 可調整最大寬度

    //
    private DateTime m_EndDate = DateTime.Now; // 視圖結束日期
    private List<TaskRow> m_ViewabledTaskRows { get; set; } = new(); // 可視範圍內的任務行
    private List<DateTime> m_TimeSlots { get; set; } = new(); // 時間槽列表
    private List<double> m_TimeSlotsWidth = new(); // 時間槽寬度列表

    public class TaskRow
    {
        public string Name { get; set; } = string.Empty;
        public List<TaskItem> Tasks { get; set; } = new();
        public string Color { get; set; } = "#4CAF50"; // 預設顏色
    }

    public class TaskItem
    {
        public string Name { get; set; } = string.Empty;
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }

    //
    protected override void OnParametersSet()
    {
        UpdateTimeSlots();
    }

    //
    protected override void OnInitialized()
    {
        UpdateTimeSlots();
    }

    //
    private void UpdateTimeSlots()
    {
        m_TimeSlots.Clear();
        m_TimeSlotsWidth.Clear();
        m_ViewabledTaskRows.Clear();

        //
        if (TaskRows.Count == 0 || TaskRows.All(r => r.Tasks.Count == 0))
            return;

        //
        m_EndDate = DateTime.Now;

        // 依據當前視圖類型，計算時間軸的起始和結束日期
        if (CurrentView == "Month")
        {
            // 月視圖：從當前日期開始，顯示未來29天
            m_EndDate = StartDate.AddDays(29);
        }
        else if (CurrentView == "Quarter")
        {
            // 季視圖：從當前日期所在週的週一開始，顯示13週
            m_EndDate = StartDate.AddDays(13 * 7);
        }
        else if (CurrentView == "Year")
        {
            // 年視圖：從當前日期月份開始，共12個月
            m_EndDate = StartDate.AddMonths(12);
        }

        // 過濾出在此區間中的 TaskRows
        // 過濾出重疊此區間的任務
        m_ViewabledTaskRows = TaskRows
            .Where(r => r.Tasks.Any(t => t.Start <= m_EndDate && t.End >= StartDate))
            .ToList();

        if (m_ViewabledTaskRows.Count == 0)
        {
            // 如果沒有可視範圍內的任務，則不顯示時間槽
            return;
        }

        // 計算時間軸的時間槽
        var allTasks = m_ViewabledTaskRows.SelectMany(r => r.Tasks).ToList();
        var minDate = allTasks.Min(t => t.Start).Date;  // 所有任務的最早開始日
        var maxDate = allTasks.Max(t => t.End).Date;    // 所有任務的最晚結束日

        //
        switch (CurrentView)
        {
            case "Month":
                for (var date = StartDate; date <= m_EndDate; date = date.AddDays(1))
                    m_TimeSlots.Add(date);
                break;
            case "Quarter":
                // 季視圖：以週為單位，從當前日期所在週開始
                var quarterToday = StartDate;
                // 找到當前日期所在週的週一
                var currentWeekMonday = quarterToday.AddDays(-(int)quarterToday.DayOfWeek + (int)DayOfWeek.Monday);
                // 如果今天是週日，DayOfWeek.Sunday = 0，需要特殊處理
                if (quarterToday.DayOfWeek == DayOfWeek.Sunday)
                {
                    currentWeekMonday = quarterToday.AddDays(-6);
                }

                // 從當前週開始，生成足夠的週數來填滿視圖
                var weekCount = 13; // 生成13週來填滿視圖
                for (int i = 0; i < weekCount; i++)
                {
                    var weekStart = currentWeekMonday.AddDays(i * 7);
                    m_TimeSlots.Add(weekStart);
                }
                break;
            case "Year":
                // 從當前日期月份開始，共12個月
                minDate = new DateTime(minDate.Year, minDate.Month, 1);
                maxDate = minDate.AddMonths(11);
                for (var date = minDate; date <= maxDate; date = date.AddMonths(1))
                    m_TimeSlots.Add(date);
                break;
        }

        // 計算每個時間槽的寬度
        foreach (var slot in m_TimeSlots)
        {
            // 每個時間槽的寬度為 100% / 時間槽數量
            m_TimeSlotsWidth.Add(__GanttMaxWidth__ / m_TimeSlots.Count);
        }
    }

    // 格式化時間槽的顯示
    private string FormatTimeSlot(DateTime slot)
    {
        return CurrentView switch
        {
            "Month" => slot.Day.ToString(),
            "Quarter" => slot.ToString("M/d"), 
            "Year" => slot.ToString("MM"),
            _ => slot.ToString("")
        };
    }

    // 格式化時間槽的顯示
    private string TimeSlotColor(DateTime slot)
    {
        if(slot.DayOfWeek == DayOfWeek.Saturday || slot.DayOfWeek == DayOfWeek.Sunday)
        {
            return "red"; // 週末顏色
        }
        return "black"; // 平日顏色
    }

    private string GetTaskStyle(TaskItem task)
    {
        if (m_TimeSlots == null || m_TimeSlots.Count == 0)
            return "display:none;";

        var viewStartDate = m_TimeSlots.First().Date;
        var viewEndDate = m_TimeSlots.Last().Date;
        var taskStartDate = task.Start.Date;
        var taskEndDate = task.End.Date;

        // 1. 如果任務完全在可視範圍之外，則不顯示
        if (taskEndDate < viewStartDate || taskStartDate > viewEndDate)
        {
            return "display:none;";
        }

        // 根據視圖類型處理任務位置
        switch( CurrentView)
        {
            case "Month":
                // 月視圖：任務必須對齊天的邊界
                return _GetMonthTaskStyle(task);
            case "Quarter":
                // 季視圖：任務必須對齊週的邊界
                return _GetQuarterTaskStyle(task);
            case "Year":
                // 年視圖：任務必須對齊月的邊界
                return _GetYearTaskStyle(task);
            default:
                return "display:none;";
        }
        // else
        // {
        //     // 其他視圖：原有的邏輯
        //     int startIndex = m_TimeSlots.FindIndex(d => d.Date == taskStartDate);
        //     int endIndex = m_TimeSlots.FindIndex(d => d.Date == taskEndDate);

        //     // 處理任務超出可視範圍的情況
        //     if (startIndex == -1)
        //     {
        //         startIndex = 0;
        //     }
        //     if (endIndex == -1)
        //     {
        //         endIndex = m_TimeSlots.Count - 1;
        //     }

        //     if (CurrentView == "Month")
        //     {
        //         double leftPercent = (double)startIndex / m_TimeSlots.Count * 100;
        //         double widthPercent = (double)(endIndex - startIndex + 1) / m_TimeSlots.Count * 100;
        //         return $"left: {leftPercent.ToString(CultureInfo.InvariantCulture)}%; width: {widthPercent.ToString(CultureInfo.InvariantCulture)}%;";
        //     }
        //     else
        //     {
        //         int slotWidth = SlotWidth;
        //         var leftOffset = startIndex * slotWidth;
        //         var width = (endIndex - startIndex + 1) * slotWidth;
        //         return $"left: {leftOffset}px; width: {width}px;";
        //     }
        // }
    }

    //
    private string _GetMonthTaskStyle(TaskItem task)
    {
        var taskStartDate = task.Start.Date;
        var taskEndDate = task.End.Date;
        var viewStartDate = m_TimeSlots.First().Date;
        var viewEndDate = m_TimeSlots.Last().Date;

        // 判斷任務是否在可視範圍內 
        if (taskStartDate > viewEndDate || taskEndDate < viewStartDate)
        {
            return "display:none;";
        }
        // 確保結束日期不早於開始日期
        if (taskEndDate < taskStartDate)
        {
            return "display:none;";
        }

        // 確定任務開始和結束日期在時間槽中
        if (taskStartDate < viewStartDate)
        {
            taskStartDate = viewStartDate; // 確保開始日期不早於可視範圍
        }
        if (taskEndDate > viewEndDate)
        {
            taskEndDate = viewEndDate; // 確保結束日期不晚於可視範圍
        }

        // 計算任務在時間槽中的位置和寬度
        int startIndex = m_TimeSlots.FindIndex(d => d.Date == taskStartDate);
        int endIndex = m_TimeSlots.FindIndex(d => d.Date == taskEndDate);

        double leftPercent = startIndex > 0 ? m_TimeSlotsWidth.Take(startIndex).Sum() : 0;
        double widthPercent = m_TimeSlotsWidth.Take(endIndex+1).Sum() - leftPercent;

        return $"left: {leftPercent.ToString(CultureInfo.InvariantCulture)}px; width: {widthPercent.ToString(CultureInfo.InvariantCulture)}px;";
    }

    //
    private string _GetQuarterTaskStyle(TaskItem task)
    {
        var taskStartDate = task.Start.Date;
        var taskEndDate = task.End.Date;
        var viewStartDate = m_TimeSlots.First().Date;
        var viewEndDate = m_TimeSlots.Last().Date;

        // 判斷任務是否在可視範圍內
        if (taskStartDate > viewEndDate || taskEndDate < viewStartDate)
        {
            return "display:none;";
        }
        // 確保結束日期不早於開始日期
        if (taskEndDate < taskStartDate)
        {
            return "display:none;";
        }

        // 確定任務開始和結束日期在時間槽中
        if (taskStartDate < viewStartDate)
        {
            taskStartDate = viewStartDate; // 確保開始日期不早於可視範圍
        }
        if (taskEndDate > viewEndDate)
        {
            taskEndDate = viewEndDate; // 確保結束日期不晚於可視範圍
        }

        // 計算任務在時間槽中的位置和寬度
        int startIndex = m_TimeSlots.FindIndex(d => d.Date == taskStartDate);
        int endIndex = m_TimeSlots.FindIndex(d => d.Date == taskEndDate);

        double leftPercent = startIndex > 0 ? m_TimeSlotsWidth.Take(startIndex).Sum() : 0;
        double widthPercent = m_TimeSlotsWidth.Take(endIndex + 1).Sum() - leftPercent;

        return $"left: {leftPercent.ToString(CultureInfo.InvariantCulture)}px; width: {widthPercent.ToString(CultureInfo.InvariantCulture)}px;";
    }

    //
    private string _GetYearTaskStyle(TaskItem task)
    {
        // 找到任務開始和結束日期所在的週
        var taskStartWeek = GetWeekStart(task.Start.Date);
        var taskEndWeek = GetWeekStart(task.End.Date);

        // 找到這些週在時間軸上的索引
        int startIndex = m_TimeSlots.FindIndex(d => d.Date == taskStartWeek);
        int endIndex = m_TimeSlots.FindIndex(d => d.Date == taskEndWeek);

        // 如果任務週不在可視範圍內，不顯示
        if (startIndex == -1 || endIndex == -1)
        {
            return "display:none;";
        }

        // 計算位置和寬度
        int slotWidth = 20;// SlotWidth;
        var leftOffset = startIndex * slotWidth;
        var width = (endIndex - startIndex + 1) * slotWidth;
        return $"left: {leftOffset}px; width: {width}px;";
    }

    private DateTime GetWeekStart(DateTime date)
    {
        // 找到該日期所在週的週一
        var dayOfWeek = (int)date.DayOfWeek;
        var daysToSubtract = dayOfWeek - (int)DayOfWeek.Monday;
        if (daysToSubtract < 0) daysToSubtract += 7; // 處理週日的情況
        return date.AddDays(-daysToSubtract);
    }

    private string GetTaskColor(string baseColor, TaskItem task)
    {
        // 根據任務名稱生成不同的顏色變化
        var colorVariations = new[]
        {
            baseColor, // 原始顏色
            AdjustBrightness(baseColor, 1.0f), // 亮一點
            AdjustBrightness(baseColor, 1.0f), // 暗一點
            AdjustSaturation(baseColor, 1.0f), // 飽和度高一點
            AdjustSaturation(baseColor, 1.0f)  // 飽和度低一點
        };
        
        // 根據任務名稱的雜湊值選擇顏色變化
        var hash = task.Name.GetHashCode();
        var index = Math.Abs(hash) % colorVariations.Length;
        return colorVariations[index];
    }

    private string AdjustBrightness(string hexColor, float factor)
    {
        // 簡單的亮度調整
        if (hexColor.StartsWith("#") && hexColor.Length == 7)
        {
            var r = int.Parse(hexColor.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            var g = int.Parse(hexColor.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            var b = int.Parse(hexColor.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            
            r = Math.Min(255, (int)(r * factor));
            g = Math.Min(255, (int)(g * factor));
            b = Math.Min(255, (int)(b * factor));
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        return hexColor;
    }

    private string AdjustSaturation(string hexColor, float factor)
    {
        // 簡單的飽和度調整
        if (hexColor.StartsWith("#") && hexColor.Length == 7)
        {
            var r = int.Parse(hexColor.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            var g = int.Parse(hexColor.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            var b = int.Parse(hexColor.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            
            var avg = (r + g + b) / 3;
            r = Math.Min(255, (int)(avg + (r - avg) * factor));
            g = Math.Min(255, (int)(avg + (g - avg) * factor));
            b = Math.Min(255, (int)(avg + (b - avg) * factor));
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        return hexColor;
    }
} 