@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@code {
    private int GanttMaxWidth => 1200; // 可調整最大寬度
    private int SlotWidth => (CurrentView == "Month") ? (int)Math.Floor((double)GanttMaxWidth / TimeSlots.Count) : (CurrentView == "Day" ? 67 : (int)Math.Floor(1400.0 / TimeSlots.Count));
    private int TimelineWidth => TimeSlots.Count * SlotWidth;
}

<div style="width:1200px; height:500px; position:relative;">
    <div class="gantt-outer">
        <div class="gantt-corner"></div>
        <div class="gantt-timeline-scroll" id="gantt-timeline-scroll">
            <div class="gantt-timeline" style="width:@GanttMaxWidth px">
                @if (CurrentView == "Month")
                {
                    for (int i = 0; i < TimeSlots.Count; i++)
                    {
                        <div class="timeline-slot" style="width:calc(100%/@TimeSlots.Count)">@FormatTimeSlot(TimeSlots[i])</div>
                    }
                }
                else
                {
                    for (int i = 0; i < TimeSlots.Count; i++)
                    {
                        <div class="timeline-slot @(CurrentView == "Day" ? "day-slot" : null)" style="width:@SlotWidth">@FormatTimeSlot(TimeSlots[i])</div>
                    }
                }
            </div>
        </div>
        <div class="gantt-main">
            <div class="gantt-label-scroll" id="gantt-label-scroll">
                @for (int i = 0; i < TaskRows.Count; i++)
                {
                    <div class="row-label" id="row-label-@i" style="background:@TaskRows[i].Color; color:#fff;">@TaskRows[i].Name</div>
                }
            </div>
            <div class="gantt-tasks-scroll" id="gantt-tasks-scroll">
                <div class="gantt-tasks" style="width:@GanttMaxWidth px">
                    @for (int i = 0; i < TaskRows.Count; i++)
                    {
                        <div class="row-tasks" id="row-tasks-@i">
                            @foreach (var task in TaskRows[i].Tasks)
                            {
                                <div class="task" style="@GetTaskStyle(task); background:@GetTaskColor(TaskRows[i].Color, task);">@task.Name</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("ganttSyncScroll");
        }
        await JS.InvokeVoidAsync("ganttSyncRowHeights");
    }
}

<style>
.gantt-outer {
    display: grid;
    grid-template-columns: 150px 1fr;
    grid-template-rows: 40px 1fr;
    font-family: Arial, sans-serif;
    margin: 20px;
    background: #fff;
}
.timeline-slot {
    border-right: 1px solid #ddd;
    padding: 5px 0;
    text-align: center;
    box-sizing: border-box;
    color: #222;
    background: #fff;
}
.timeline-slot.day-slot {
    min-width: 67px;
    width: 67px;
    max-width: 67px;
}
.gantt-corner {
    grid-row: 1 / 2;
    grid-column: 1 / 2;
    background: #f8f8f8;
    border-right: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    height: 40px;
}
.gantt-timeline-scroll {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    overflow-x: hidden;
    overflow-y: hidden;
    background: #fff;
    border-bottom: 1px solid #ddd;
    height: 40px;
}
.gantt-timeline {
    display: flex;
    height: 40px;
}
.gantt-main {
    grid-row: 2 / 3;
    grid-column: 1 / 3;
    display: flex;
    height: 460px;
}
.gantt-label-scroll {
    width: 150px;
    min-width: 150px;
    max-width: 150px;
    overflow-y: hidden;
    overflow-x: hidden;
    background: #f8f8f8;
    border-right: 1px solid #ddd;
    height: 100%;
}
.gantt-tasks-scroll {
    flex: 1;
    overflow: auto;
    height: 100%;
}
.gantt-tasks {
    /* min-width is handled dynamically by inline style */
}
.gantt-label-col, .gantt-tasks-col {
    display: flex;
    flex-direction: column;
}
.row-label, .row-tasks {
    min-height: 50px;
    display: flex;
    align-items: stretch;
}
.row-label {
    width: 150px;
    min-width: 150px;
    max-width: 150px;
    padding: 10px;
    border-bottom: 1px solid #ddd;
    background: #f8f8f8;
    color: #222;
    box-sizing: border-box;
}
.row-tasks {
    position: relative;
    min-height: 50px;
    border-bottom: 1px solid #ddd;
}
.task {
    position: absolute;
    background: #4CAF50;
    color: white;
    padding: 5px;
    border-radius: 3px;
    margin: 5px 0;
    min-width: 50px;
    text-align: left;
    cursor: pointer;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    font-size: 16px;
    /* 為任務之間添加間距 */
    margin-bottom: 8px;
    /* 添加邊框以區分任務 */
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
</style>

@code {
    [Parameter]
    public string CurrentView { get; set; } = "Day";

    private List<TaskRow> TaskRows { get; set; } = new();
    private List<DateTime> TimeSlots { get; set; } = new();

    private class TaskRow
    {
        public string Name { get; set; } = string.Empty;
        public List<TaskItem> Tasks { get; set; } = new();
        public string Color { get; set; } = "#4CAF50"; // 預設顏色
    }

    private class TaskItem
    {
        public string Name { get; set; } = string.Empty;
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }

    protected override void OnInitialized()
    {
        // Sample data
        TaskRows = new List<TaskRow>
        {
            new TaskRow
            {
                Name = "Project A",
                Color = "#4CAF50",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 1", Start = new DateTime(2025, 7, 25), End = new DateTime(2025, 7, 31) },
                    new TaskItem { Name = "Task 2", Start = new DateTime(2025, 8, 1), End = new DateTime(2025, 8, 5) },
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 8, 16), End = new DateTime(2025, 8, 31) }
                }
             },
            new TaskRow
            {
                Name = "Project B",
                Color = "#2196F3",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 21", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 12) },
                    new TaskItem { Name = "Task 22", Start = new DateTime(2025, 7, 14), End = new DateTime(2025, 7, 19) },
                    new TaskItem { Name = "Task 23", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project C",
                Color = "#FFC107",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 1), End = new DateTime(2025, 7, 5) },
                    new TaskItem { Name = "Task 4", Start = new DateTime(2025, 7, 10), End = new DateTime(2025, 7, 15) }
                }
            },
            new TaskRow
            {
                Name = "Project D",
                Color = "#E91E63",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 6), End = new DateTime(2025, 7, 12) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 14), End = new DateTime(2025, 8, 18) }
                }
            },
            new TaskRow
            {
                Name = "Project E",
                Color = "#9C27B0",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project F",
                Color = "#00BCD4",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project G",
                Color = "#8BC34A",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project H",
                Color = "#FF9800",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project I",
                Color = "#795548",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project 001",
                Color = "#607D8B",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project 002",
                Color = "#F44336",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project 003",
                Color = "#4CAF50",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            },
            new TaskRow
            {
                Name = "Project 004",
                Color = "#FFC107",
                Tasks = new List<TaskItem>
                {
                    new TaskItem { Name = "Task 3", Start = new DateTime(2025, 7, 8), End = new DateTime(2025, 7, 20) },
                    new TaskItem { Name = "Task 7", Start = new DateTime(2025, 7, 21), End = new DateTime(2025, 8, 5) }
                }
            }
        };

        UpdateTimeSlots();
    }

    protected override void OnParametersSet()
    {
        UpdateTimeSlots();
    }

    private void UpdateTimeSlots()
    {
        TimeSlots.Clear();

        if (TaskRows.Count == 0 || TaskRows.All(r => r.Tasks.Count == 0))
            return;

        var allTasks = TaskRows.SelectMany(r => r.Tasks).ToList();
        var minDate = allTasks.Min(t => t.Start).Date;  // 所有任務的最早開始日
        var maxDate = allTasks.Max(t => t.End).Date;    // 所有任務的最晚結束日

        // 加 buffer（前後各 15 天）
        minDate = minDate.AddDays(-15);
        maxDate = maxDate.AddDays(15);

        switch (CurrentView)
        {
            case "Day":
                for (var date = minDate; date <= maxDate; date = date.AddDays(1))
                    TimeSlots.Add(date);
                break;
            case "Month":
                // 月模式：今天~今天+30天
                var today = DateTime.Today;
                var lastDay = today.AddDays(30);
                for (var date = today; date <= lastDay; date = date.AddDays(1))
                    TimeSlots.Add(date);
                break;
            case "Quarter":
                minDate = minDate.AddDays(-(int)minDate.DayOfWeek);
                maxDate = maxDate.AddDays(7 - (int)minDate.DayOfWeek);
                for (var date = minDate; date <= maxDate; date = date.AddDays(7))
                    TimeSlots.Add(date);
                break;
            case "Year":
                minDate = new DateTime(minDate.Year, 1, 1);
                maxDate = new DateTime(minDate.Year, 12, 31);
                for (var date = minDate; date <= maxDate; date = date.AddMonths(1))
                    TimeSlots.Add(date);
                break;
        }

        // Debug: 印出時間軸資訊
        Console.WriteLine($"TimeSlots.Count: {TimeSlots.Count}, TimelineWidth: {TimelineWidth}");
        if (TimeSlots.Count > 0)
        {
            Console.WriteLine($"First Date: {TimeSlots[0]}, Last Date: {TimeSlots[TimeSlots.Count-1]}");
        }
    }

    private string FormatTimeSlot(DateTime slot)
    {
        return CurrentView switch
        {
            "Day" => slot.ToString("M/d"),
            "Month" => slot.Day.ToString(),
            "Quarter" => $"{slot:MM/dd}",
            "Year" => slot.ToString("yyyy"),
            _ => slot.ToString("d MMM yyyy")
        };
    }

    private string GetTaskStyle(TaskItem task)
    {
        if (TimeSlots == null || TimeSlots.Count == 0)
            return "display:none;";

        var viewStartDate = TimeSlots.First().Date;
        var viewEndDate = TimeSlots.Last().Date;
        var taskStartDate = task.Start.Date;
        var taskEndDate = task.End.Date;

        // 1. 如果任務完全在可視範圍之外，則不顯示
        if (taskEndDate < viewStartDate || taskStartDate > viewEndDate)
        {
            return "display:none;";
        }

        // 2. 尋找任務開始與結束日期在時間軸上的索引
        int startIndex = TimeSlots.FindIndex(d => d.Date == taskStartDate);
        int endIndex = TimeSlots.FindIndex(d => d.Date == taskEndDate);

        // 3. 處理任務超出可視範圍的情況
        if (startIndex == -1)
        {
            // 任務開始日期在可視範圍之前，從頭開始顯示
            startIndex = 0;
        }
        if (endIndex == -1)
        {
            // 任務結束日期在可視範圍之後，顯示到結尾
            endIndex = TimeSlots.Count - 1;
        }

        // 4. 根據視圖計算樣式
        if (CurrentView == "Month")
        {
            double leftPercent = (double)startIndex / TimeSlots.Count * 100;
            double widthPercent = (double)(endIndex - startIndex + 1) / TimeSlots.Count * 100;
            return $"left: {leftPercent.ToString(CultureInfo.InvariantCulture)}%; width: {widthPercent.ToString(CultureInfo.InvariantCulture)}%;";
        }
        else
        {
            int slotWidth = SlotWidth;
            var leftOffset = startIndex * slotWidth;
            var width = (endIndex - startIndex + 1) * slotWidth;
            return $"left: {leftOffset}px; width: {width}px;";
        }
    }

    private string GetTaskColor(string baseColor, TaskItem task)
    {
        // 根據任務名稱生成不同的顏色變化
        var colorVariations = new[]
        {
            baseColor, // 原始顏色
            AdjustBrightness(baseColor, 1.0f), // 亮一點
            AdjustBrightness(baseColor, 1.0f), // 暗一點
            AdjustSaturation(baseColor, 1.0f), // 飽和度高一點
            AdjustSaturation(baseColor, 1.0f)  // 飽和度低一點
        };
        
        // 根據任務名稱的雜湊值選擇顏色變化
        var hash = task.Name.GetHashCode();
        var index = Math.Abs(hash) % colorVariations.Length;
        return colorVariations[index];
    }

    private string AdjustBrightness(string hexColor, float factor)
    {
        // 簡單的亮度調整
        if (hexColor.StartsWith("#") && hexColor.Length == 7)
        {
            var r = int.Parse(hexColor.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            var g = int.Parse(hexColor.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            var b = int.Parse(hexColor.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            
            r = Math.Min(255, (int)(r * factor));
            g = Math.Min(255, (int)(g * factor));
            b = Math.Min(255, (int)(b * factor));
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        return hexColor;
    }

    private string AdjustSaturation(string hexColor, float factor)
    {
        // 簡單的飽和度調整
        if (hexColor.StartsWith("#") && hexColor.Length == 7)
        {
            var r = int.Parse(hexColor.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            var g = int.Parse(hexColor.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            var b = int.Parse(hexColor.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            
            var avg = (r + g + b) / 3;
            r = Math.Min(255, (int)(avg + (r - avg) * factor));
            g = Math.Min(255, (int)(avg + (g - avg) * factor));
            b = Math.Min(255, (int)(avg + (b - avg) * factor));
            
            return $"#{r:X2}{g:X2}{b:X2}";
        }
        return hexColor;
    }
} 